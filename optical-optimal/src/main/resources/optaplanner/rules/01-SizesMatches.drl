/**
 * BRMS Rules 
 *
 * Sunil Samuel CONFIDENTIAL
 *
 *  [2014] Sunil Samuel
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Sunil Samuel. The intellectual and technical
 * concepts contained herein are proprietary to Sunil Samuel
 * and may be covered by U.S. and Foreign Patents, patents in
 * process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission
 * is obtained from Sunil Samuel.
 */
package com.sunilsamuel.optical.optimal.rules;

import com.sunilsamuel.optical.optimal.planner.model.OpticalDriveBucket;
import com.sunilsamuel.optical.optimal.planner.model.FolderPlanningEntity;

rule "Match the Sizes of Buckets"
when
	$bucket : OpticalDriveBucket ($size : size, $id : id)
	$totalSize : Number (longValue > $size) from accumulate (
		FolderPlanningEntity (
			opticalDriveBucket != null,
			opticalDriveBucket.id == $bucket.id,
			$folderSize : size
		),
		sum ($folderSize)
	)
then
	scoreHolder.addHardConstraintMatch(kcontext, $size - $totalSize.longValue());
end